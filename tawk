#!/usr/bin/env tclsh
# -*- tcl -*-

# Copyright 2020 Shawn Wagner <shawnw.mobile@gmail.com>

# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:

# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package require Tcl 8.6
package require dicttool
package require textutil::split
package require cmdline
package require csv

# Version scheme:

# 0.X.Y - Increment X for things that change existing behavior, or new
# features .Y for bug fixes and minor refactoring.

# 1.0.0 - First "done" release.

# X.Y.Z - Increment X for things that break backwards compatibility,
# Y for new features, Z for bug fixes.

set version 0.12.6

set commands [dict create]

proc setup_interp {i} {
    interp share "" stdin $i
    interp share "" stderr $i
    interp share "" stdout $i

    interp alias $i BEGIN {} BEGIN
    interp alias $i END {} END
    interp alias $i BEGINFILE {} BEGINFILE
    interp alias $i ENDFILE {} ENDFILE
    interp alias $i line {} line
    interp alias $i rline {} rline
    interp alias $i csv_join {} ::csv::join
    interp alias $i csv_split {} ::csv::split
    interp alias $i ::internal::numberlist {} numberlist

    interp eval $i {trace add variable ::OFS write ::internal::trace_ofs}
    interp eval $i {trace add variable ::CSV write ::internal::trace_raise_error}

    interp eval $i {namespace eval internal {
        proc build_f0_normal {} {
            set new_f0 [lmap i [lrange [lsort -integer [array names ::F]] 1 end] {
                set ::F($i)
            }]
            return [join $new_f0 $::OFS]
        }

        proc build_f0_csv {} {
            set new_f0 [lmap i [lrange [lsort -integer [array names ::F]] 1 end] {
                set ::F($i)
            }]
            return [csv_join $new_f0 $::OFS $::CSVQUOTECHAR $::CSVQUOTE]
        }

        proc trace_ofs {_ _ op} {
            if {[array exists ::F]} {
                trace remove variable ::F write ::internal::trace_f
                if {$::CSV} {
                    set ::F(0) [build_f0_csv]
                } else {
                    set ::F(0) [build_f0]
                }
                trace add variable ::F write ::internal::trace_f
            }
        }

        proc trace_f {_ key _} {
            if {![string is integer $key] || $key < 0} {
                error "Attempt to use out-of-range field index."
            }
            trace remove variable ::F write ::internal::trace_f
            if {$key == 0} {
                set line $::F(0)
                unset ::F ::NF
                set ::F(0) $line
                if {[info exists ::FS]} {
                    if {$::FS eq " "} {
                        set fs whitespace
                    } else {
                        set fs [list present $::FS]
                    }
                } else {
                    set fs whitespace
                }
                set fields [split_line $line $fs]
                set ::NF [llength $fields]
                array set ::F [numberlist $fields]
                trace add variable ::NF write ::internal::trace_nf
            } else {
                if {$key > $::NF} {
                    for {set i [expr {$::NF + 1}]} {$i < $key} {incr i} {
                        set ::F($i) ""
                    }
                }
                trace remove variable ::NF write ::internal::trace_nf
                set ::NF [expr {[array size ::F] - 1}]
                trace add variable ::NF write ::internal::trace_nf
            }
            if {$::CSV} {
                set ::F(0) [build_f0_csv]
            } else {
                set ::F(0) [build_f0_normal]
            }
            trace add variable ::F write ::internal::trace_f
        }

        proc trace_nf {_ _ _} {
            if {![string is integer $::NF] || $::NF < 0} {
                error "Attempt to set NF to an out of range value."
            }
            set len [expr {[array size ::F] - 1}]
            trace remove variable ::F write ::internal::trace_f
            if {$len < $::NF} {
                for {set i [expr {$len + 1}]} {$i <= $::NF} {incr i} {
                    set ::F($i) ""
                }
            } elseif {$len > $::NF} {
                for {set i $len} {$i > $::NF} {incr i -1} {
                    unset ::F($i)
                }
            }
            if {$::CSV} {
                set ::F(0) [build_f0_csv]
            } else {
                set ::F(0) [build_f0_normal]
            }
            trace add variable ::F write ::internal::trace_f
        }

        proc trace_csvquote {_ _ _} {
            set valid_options {always auto}
            if {$::CSVQUOTE ni $valid_options} {
                error "CSVQUOTE must be one of: auto, always"
            }
        }

        proc trace_single_char_var {var _ op} {
            upvar $var v
            if {[string length $v] != 1} {
                error "$var can only be one character"
            }
        }

        proc trace_raise_error {var _ op} {
            error "Unable to $op protected variable $var"
        }

        namespace export trace_*
    }}
    if {[interp eval $i {set ::CSV}]} {
        interp eval $i {trace add variable ::CSVQUOTECHAR write \
                            ::internal::trace_single_char_var}
        interp eval $i \
            {trace add variable ::CSVQUOTE write \
                 ::internal::trace_csvquote}
        interp eval $i {set ::OFS ","}
        interp eval $i {trace add variable ::OFS write \
                            ::internal::trace_single_char_var}
        interp eval $i {trace add variable ::FS write \
                            ::internal::trace_single_char_var}
        interp eval $i {
            proc print args {
                if {[llength $args] == 0} {
                    puts $::F(0)
                } else {
                    puts [csv_join $args $::OFS $::CSVQUOTECHAR $::CSVQUOTE]
                }
            }}
        interp hide $i gets
        interp alias $i gets {} gets_csv
        interp alias $i ::internal::split_line {} split_csv
    } else {
        interp eval $i {set ::OFS " "}
        interp eval $i {
            proc print args {
                if {[llength $args] == 0} {
                    puts $::F(0)
                } else {
                    puts [join $args $::OFS]
                }
            }}
        interp alias $i ::internal::split_line {} split_re
    }
}

proc cleanup_interp {i} {
    # Remove toplevel aliases after parsing script
    interp alias $i BEGIN {}
    interp alias $i END {}
    interp alias $i BEGINFILE {}
    interp alias $i ENDFILE {}
    interp alias $i line {}
    interp alias $i rline {}
}

# Open file and call body for each line read from it.
proc foreach_line {var f gets body} {
    upvar $var line
    while {[$gets $f line] >= 0} {
        try {
            uplevel 1 $body
        } on error {msg opts} {
            return -options $opts -level 2 $msg
        } on return {msg opts} {
            return -options $opts -level 2
        } on break {} {
            break
        }
    }
}

proc foreach_idx {var idx lst bdy} {
    upvar $var v $idx i
    set i 0
    foreach v $lst {
        try {
            uplevel 1 $bdy
        } on error {msg opts} {
            return -options $opts -level 2 $msg
        } on return {msg opts} {
            return -options $opts -level 2 $msg
        } on break {} {
            break
        } finally {
            incr i
        }
    }
}

proc numberlist {lst} {
    set result {}
    foreach_idx f i $lst {
        lappend result [expr {$i + 1}] $f
    }
    return $result
}

proc split_re {line fs} {
    lassign $fs mode val
    if {$mode eq "whitespace" || $val eq " "} {
        return [::textutil::split::splitx [string trim $line] {\s+}]
    } elseif {[string length $val] <= 1} {
        return [split $line $val]
    } else {
        return [::textutil::split::splitx $line $val]
    }
}

proc gets_csv {file linevar} {
    upvar $linevar line
    set line ""
    set totlen 0
    while {[set len [gets $file tmp]] >= 0} {
        incr totlen $len
        if {$line ne ""} {
            append line "\n" $tmp
        } else {
            set line $tmp
        }
        if {[::csv::iscomplete $line]} {
            return $totlen
        }
    }
    return $len
}

proc split_csv {line fs {quotechar \"}} {
    lassign $fs mode val
    if {$mode eq "whitespace"} {
        return [::csv::split $line , $quotechar]
    } else {
        return [::csv::split $line $val $quotechar]
    }
}

proc process_file {i filename gets splitter} {
    variable commands

    interp eval $i [list set ::FILENAME $filename]
    interp eval $i {set ::FNR 0}
    if {$filename eq "-"} {
        set f stdin
    } else {
        set f [open $filename r]
        interp share "" $f $i
    }
    interp eval $i [list set ::INFILE $f]

    try {
        try {
            foreach script [dict getnull $commands BEGINFILE] {
                interp eval $i $script
            }
        } on break {} {
            return -level 0 -code 5
        }

        foreach_line line $f $gets {
            interp eval $i {incr ::FNR}
            interp eval $i {incr ::NR}
            interp eval $i {array unset ::F}
            interp eval $i {unset ::NF}
            if {[interp eval $i {info exists ::FS}]} {
                set fs [list present [interp eval $i {set ::FS}]]
            } else {
                set fs whitespace
            }
            set fields [$splitter $line $fs]
            interp eval $i [list set ::NF [llength $fields]]
            interp eval $i [list set ::F(0) $line]
            interp eval $i [list array set ::F [numberlist $fields]]
            interp eval $i {trace add variable ::NF write ::internal::trace_nf}
            interp eval $i {trace add variable ::F write ::internal::trace_f}
            foreach pattern [dict getnull $commands patterns] {
                try {
                    switch [lindex $pattern 0] {
                        expr {
                              lassign $pattern _ test script
                              interp eval $i [list if $test $script]
                          }
                        re {
                            lassign $pattern _ field re script
                            if {![string is integer $field] || $field < 0} {
                                error "Attempt to use out-of-range field index."
                            }
                            if {$field <= [interp eval $i {array size ::F}]} {
                                set val \
                                    [interp eval $i \
                                         [list set [format "::F(%d)" $field]]]
                            } else {
                                set val ""
                            }
                            if {[regexp $re $val]} {
                                interp eval $i $script
                            }
                        }
                    }
                } on error {msg opts} {
                    return -options $opts $msg
                } on break {} {
                    # Skip further processing of the current file
                    return -level 0 -code 5
                } on continue {} {
                    # Skip further processing of the current line
                    break
                }
            }
        }
        try {
            foreach script [dict getnull $commands ENDFILE] {
                interp eval $i $script
            }
        } on break {} {
            return -level 0 -code 5
        }

    } on error {msg opts} {
        return -options $opts $msg
    } on 5 {} {
    } finally {
        if {$filename ne "-"} {
            close $f
            interp eval $i {close $::INFILE}
        }
        interp eval $i {unset ::INFILE}
    }
}

proc tawk {i files gets splitter} {
    variable commands

    set nfiles_processed 0

    interp eval $i {set ::NR 0}
    interp eval $i {set ::NF 0}

    foreach script [dict getnull $commands BEGIN] {
        interp eval $i $script
    }
    foreach file $files {
        if {[regexp {^(\w+)=(.*)} $file -> varname varval]} {
            interp eval $i [list set $varname $varval]
            continue
        }

        incr nfiles_processed

        if {![::file exists $file]} {
            puts stderr "Input file '$file' does not exist; skipping."
            continue
        }

        process_file $i $file $gets $splitter
    }
    # Read from standard input if no files given on command line
    if {$nfiles_processed == 0} {
        process_file $i - $gets $splitter
    }
    foreach script [dict getnull $commands END] {
        interp eval $i $script
    }
}

proc BEGIN {body} {
    variable commands
    dict lappend commands BEGIN $body
}

proc END {body} {
    variable commands
    dict lappend commands END $body
}

proc BEGINFILE {body} {
    variable commands
    dict lappend commands BEGINFILE $body
}

proc ENDFILE {body} {
    variable commands
    dict lappend commands ENDFILE $body
}

proc line args {
    variable commands
    switch [llength $args] {
        1 { dict lappend commands patterns [list expr 1 {*}$args] }
        2 {
            lassign $args test body
            dict lappend commands patterns [list expr $test $body]
        }
        default { error "Invalid number of arguments to line command" }
    }
}

proc rline args {
    variable commands
    set field 0
    if {[llength $args] == 4} {
        set args [lassign $args sw field]
        if {$sw ne "-field"} {
            error "Unknown flag $sw"
        }
    }
    if {[llength $args] != 2} {
        error "rline syntax error"
    }
    lassign $args re body
    dict lappend commands patterns [list re $field $re $body]
}

proc main {argv} {
    set options {
        {f.arg "" "Filename to load instead of script given on the command line."}
        {F.arg whitespace "Field separator."}
        {csv "Input is CSV data."}
        {quoteall "Always quote CSV fields."}
        {quotechar.arg \" "Use this character to quote CSV fields."}
        {safe "Execute script in safe mode."}
        {timeout.arg 0 "Error if script takes more than N seconds to run (0 for no timeout)." }
        {version "Print version."}
    }
    set usage {[OPTIONS] ['script'] [VAR=VALUE | FILENAME] ...}

    try {
        array set params [::cmdline::getoptions argv $options $usage]
        if {[info exists params(version)] && $params(version)} {
            puts "[file tail $::argv0] $::version"
            exit 0
        }
        if {[info exists params(safe)] && $params(safe)} {
            set i [interp create -safe]
        } else {
            set i [interp create]
        }
        if {$params(timeout) > 0} {
            interp limit $i time -seconds \
                [expr {[clock seconds] + $params(timeout)}]
        }
        if {$params(F) ne "whitespace"} {
            if {$params(csv) && [string length $params(F)] != 1} {
                error "-F argument can only be a single character in CSV mode."
            }
            interp eval $i [list set ::FS $params(F)]
        }
        if {$params(csv)} {
            set gets_cmd gets_csv
            set splitter_cmd split_csv
            interp eval $i {set ::CSV 1}
            if {[string length $params(quotechar)] != 1} {
                error "-quotechar argument must be a single character."
            }
            interp eval $i [list set ::CSVQUOTECHAR $params(quotechar)]
            if {$params(quoteall)} {
                interp eval $i {set ::CSVQUOTE always}
            } else {
                interp eval $i {set ::CSVQUOTE auto}
            }
        } else {
            set gets_cmd gets
            set splitter_cmd split_re
            interp eval $i {set ::CSV 0}
        }
        setup_interp $i
        if {$params(f) ne ""} {
            if {![file exists $params(f)]} {
                error "File '$params(f)' does not exist."
            }
            if {[interp issafe $i]} {
                interp invokehidden $i source $params(f)
            } else {
                interp eval $i [list source $params(f)]
            }
            set files $argv
        } else {
            if {[llength $argv] == 0} {
                error "Missing script argument."
            }
            set files [lassign $argv script]
            interp eval $i $script
        }
        cleanup_interp $i
        tawk $i $files $gets_cmd $splitter_cmd
        interp delete $i
    } trap {CMDLINE USAGE} {msg _} {
        puts stderr $msg
        exit 0
    } on error {msg} {
        puts stderr "Error: $msg"
        exit 1
    }
}

main $argv
